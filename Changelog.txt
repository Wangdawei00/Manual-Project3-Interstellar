Changelog of project3 of team 21


REGULAR:
at first, we define all the classes, attributes and methods via discussion and everyone do their job.
and this is our diary:
class£ºParking lot
Attribute: number_of_floor, floor[](vector)
Methods: find_empty_slot(int size)(return floor's location and floor,);
                clear_slot(int floor, int row,int column);

       Floor*num
Attribute:int row, column,slot[][],string type(private)
Methods:find_empty_slot(int size)return the location£¬fill it up);
                return_type() int type;
                clear_slot(int row, int column);

        Vehicle
Attribute: int size, string type, float price, size_t arrival_time, departure_time
Methods: get_price();
                get_all_time();
                private:set_arrival(size_t arrival_time);
                            start_counting();
                            proceed(); // +1s
                            stop_counting();
                
        Ticket
Attribute: protected: type
Methods: virtual print()=0;
        ¡ª¡ªArrival ticket
        Attribute: string arrival_time, int floor, column, row
        Method: print();
        ¡ª¡ªDeparture ticket
        Attribute: int time, float price
        Method: print();

Return vector (empty,floor) get size
Attribute: 

no much optimzation for the regular one



INTERSTELLAR:

as always,we discuss the main idea, classes , attributes and methods as well.
this is our diary:
sjl:
class
parking lot
method: step
private:movingGroup?
N::
         findEmptySlot[ return slot]
         rand Group
   	Y: 
	initialize
	N:
	BYEBYE
Y::1 -3  flag judgment//pr
         move/rotate//pr
    4 shining
if arrive movinggroup=null
------------------
iterator:slot
full-> group.randcolor&spin&zoom

attribute:vectot<slot>,group* movingGroup, 

jt:
class:
slot 0.2x0.1 const  
method:pushGroup;
attribute:coodinate,group*

class 
main figure
method: draw,
attribute:vector<group>,parkingLot
 
parkinglot how many slots depends on the user :column<=16 ;2<=line<=8

however, we meet with much difficulty as every group has its own move
so we redefine every car has its specialmove function to organize all
also, we find it hard to implement our codes in 2 header files
so we include them in one file


overall, we keep optimazing our idea by discussing and luckily, we complete it !

